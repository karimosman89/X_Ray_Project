{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22654,"status":"ok","timestamp":1721048100783,"user":{"displayName":"Jose Ricardo C Teixeira","userId":"04208945243018400308"},"user_tz":-120},"id":"SIhoxRXNy_XW","outputId":"1e1734c4-fc13-402a-f5e2-0132da81786c"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.6/8.6 MB\u001b[0m \u001b[31m11.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.3/207.3 kB\u001b[0m \u001b[31m10.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m23.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m83.0/83.0 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}],"source":["!pip install -q streamlit\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":60609,"status":"ok","timestamp":1721048161386,"user":{"displayName":"Jose Ricardo C Teixeira","userId":"04208945243018400308"},"user_tz":-120},"id":"09IV5_LgVA6q","outputId":"90b34590-6645-457c-9917-bf7e56870aff"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":305,"status":"ok","timestamp":1721048184378,"user":{"displayName":"Jose Ricardo C Teixeira","userId":"04208945243018400308"},"user_tz":-120},"id":"xlWsExQcdbC0","outputId":"b0053c5a-75ef-4e10-da9c-2b990910baaf"},"outputs":[{"name":"stdout","output_type":"stream","text":["Writing app.py\n"]}],"source":["%%writefile app.py\n","\n","import streamlit as st\n","from PIL import Image\n","import numpy as np\n","import cv2\n","from tensorflow.keras.models import load_model\n","\n","# Load pre-trained models\n","@st.cache_resource\n","def load_models():\n","    try:\n","        simplified_vgg_model = load_model('/content/drive/MyDrive/Colab Notebooks/X_Ray_Project/SimplVggModel.h5')\n","        resnet50_model = load_model('/content/drive/MyDrive/Colab Notebooks/X_Ray_Project/ResNet50.h5')\n","        unet_model = load_model('/content/drive/MyDrive/Colab Notebooks/X_Ray_Project/unet_model.h5')\n","        return simplified_vgg_model, resnet50_model, unet_model\n","    except Exception as e:\n","        st.error(f\"Error loading models: {e}\")\n","        return None, None, None\n","\n","simplified_vgg_model, resnet50_model, unet_model = load_models()\n","\n","if not simplified_vgg_model or not resnet50_model or not unet_model:\n","    st.error(\"Failed to load models. Please check the model files.\")\n","else:\n","    # Function to preprocess the image\n","    def preprocess_image(image):\n","        \"\"\"\n","        Preprocess the input image to the required format for the model.\n","        - Convert to grayscale\n","        - Resize to 224x224 pixels\n","        - Normalize the image\n","        - Expand dimensions to match model input\n","        \"\"\"\n","        image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)\n","        image = cv2.resize(image, (224, 224))\n","        image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)\n","        image = image / 255.0\n","        return np.expand_dims(image, axis=0)\n","\n","    # Function to classify the image\n","    def classify_image(image, model):\n","        \"\"\"\n","        Classify the preprocessed image using the specified model.\n","        \"\"\"\n","        preprocessed_image = preprocess_image(image)\n","        prediction = model.predict(preprocessed_image)\n","        return prediction\n","\n","    # Streamlit UI\n","    st.title(\"Lung X-Ray Image Classification\")\n","    st.write(\"Upload an X-ray image and select a model to classify the lung condition.\")\n","\n","    uploaded_file = st.file_uploader(\"Choose an image...\", type=[\"jpg\", \"jpeg\", \"png\"])\n","\n","    model_option = st.selectbox(\n","        'Which model would you like to use?',\n","        ('VGG 16', 'ResNet50', 'U-Net')\n","    )\n","\n","    if uploaded_file is not None:\n","        image = Image.open(uploaded_file)\n","        st.image(image, caption='Uploaded X-ray.', use_column_width=True)\n","        st.write(\"\")\n","\n","        st.write(\"Classifying...\")\n","\n","        # Select the appropriate model based on user choice\n","        if model_option == 'VGG 16':\n","            model = simplified_vgg_model\n","        elif model_option == 'ResNet50':\n","            model = resnet50_model\n","        elif model_option == 'U-Net':\n","            model = unet_model\n","\n","        # Ensure the model is defined before classifying\n","        if model:\n","            prediction = classify_image(image, model)\n","            predicted_class = np.argmax(prediction, axis=1)\n","\n","            # Define class labels\n","            class_labels = {0: 'Covid', 1: 'Lung Opacity', 2: 'Viral Pneumonia', 3: 'Normal'}\n","            st.write(f\"Prediction: {class_labels[predicted_class[0]]}\")\n","\n","            st.write(\"Prediction probabilities:\")\n","            for i, label in class_labels.items():\n","                st.write(f\"{label}: {prediction[0][i]:.2f}\")\n","        else:\n","            st.error(\"Model could not be loaded. Please check the model files and try again.\")\n","\n","    st.write(\"Note: The models are trained on a specific dataset and might not generalize well to all images.\")\n","\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3671,"status":"ok","timestamp":1721048197094,"user":{"displayName":"Jose Ricardo C Teixeira","userId":"04208945243018400308"},"user_tz":-120},"id":"pi_7LjXedhAU","outputId":"058246ea-72cf-4aff-b353-0f752ad20c7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[K\u001b[?25h\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35msaveError\u001b[0m ENOENT: no such file or directory, open '/content/package.json'\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[34;40mnotice\u001b[0m\u001b[35m\u001b[0m created a lockfile as package-lock.json. You should commit this file.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m \u001b[0m\u001b[35menoent\u001b[0m ENOENT: no such file or directory, open '/content/package.json'\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m\u001b[35m\u001b[0m content No description\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m\u001b[35m\u001b[0m content No repository field.\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m\u001b[35m\u001b[0m content No README data\n","\u001b[0m\u001b[37;40mnpm\u001b[0m \u001b[0m\u001b[30;43mWARN\u001b[0m\u001b[35m\u001b[0m content No license field.\n","\u001b[0m\n","+ localtunnel@2.0.2\n","added 22 packages from 22 contributors and audited 22 packages in 2.202s\n","\n","3 packages are looking for funding\n","  run `npm fund` for details\n","\n","found 1 \u001b[93mmoderate\u001b[0m severity vulnerability\n","  run `npm audit fix` to fix them, or `npm audit` for details\n","\u001b[K\u001b[?25h"]}],"source":["!npm install localtunnel"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":675,"status":"ok","timestamp":1721048238907,"user":{"displayName":"Jose Ricardo C Teixeira","userId":"04208945243018400308"},"user_tz":-120},"id":"qWIRX-modlta","outputId":"afda6def-d8cb-44d0-f68f-bb074dd24405"},"outputs":[{"name":"stdout","output_type":"stream","text":["34.82.55.51"]}],"source":["!streamlit run app.py \u0026\u003e/content/logs.txt \u0026  wget -q -O - https://loca.lt/mytunnelpassword"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"eN3KsIGshsyP"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[K\u001b[?25hnpx: installed 22 in 2.532s\n","your url is: https://forty-moons-fry.loca.lt\n"]}],"source":["!npx localtunnel --port 8501"]}],"metadata":{"colab":{"name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}